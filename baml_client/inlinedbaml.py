###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    multiplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "plannar.baml": "client<llm> GPT4o {\r\n    provider openai\r\n    options {\r\n        model \"gpt-4o\"\r\n        api_key env.OPENAI_KEY\r\n    }\r\n}\r\n\r\nclass Instruction {\r\n    description string\r\n}\r\n\r\nclass Tool {\r\n    name string\r\n}\r\n\r\nclass ToolCall {\r\n    tool_name string\r\n}\r\n\r\nclass Response {\r\n    plans string[]\r\n}\r\n\r\nclass PlanExecute {\r\n    steps string\r\n}\r\n\r\nclass PlanResult {\r\n    result string\r\n}\r\n\r\nfunction GeneratePlans(instruction: Instruction, tools: Tool[]) -> Response {\r\n    client GPT4o\r\n    prompt #\"\r\n\r\n        Below are the list of tools that are provided:\r\n        \r\n        {% for tool in tools %}\r\n        {{ tool.name }}\r\n        {% endfor %}\r\n        \r\n        You are a expert planner, that can take input in natural language, identify the tools prsent in the instruction: {{ instruction.description }},\r\n        then after carefull analysis, provide the list of tool calls (STEPS) that can be taken\r\n\r\n        Your answer for each step should start as the following,\r\n        Step i: {the tool calls to be used}\r\n\r\n        where i is Natural number (step number)\r\n\r\n        {{ ctx.output_format }}\r\n    \r\n    \"#\r\n}\r\n\r\nfunction ExecutePlan(steps: PlanExecute[], tools: Tool[]) -> PlanResult {\r\n    client GPT4o\r\n\r\n    prompt #\"\r\n        You are a step executor. Given a list of steps, execute them one by one and provide the final result.\r\n        Apply the appropriate logic according to the step\r\n\r\n        You have been provided with a set of tools, use the appropriate tool at each step\r\n\r\n        {% for tool in tools %}\r\n        {{ tool.name }}\r\n        {% endfor %}\r\n\r\n\r\n        {% for st in steps %}\r\n            {{ st.steps }}\r\n        {% endfor %}\r\n\r\n        Answer in JSON using this schema:\r\n        {\r\n            result: string\r\n        }\r\n    \"#\r\n}",
}

def get_baml_files():
    return file_map